version: 2.1

orbs:
    change-api: financial-times/change-api@0.24.0

jobs:
  lint_terraform:
    docker:
      - image: circleci/node:11
    steps:
      - checkout
      - run: sudo ~/project/.circleci/install_terraform.sh
      - run: terraform fmt -check=true fastly/terraform/

  lint:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - run: npm i
      - run: npm run lint

  unit_test:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - run: npm i
      - run: npm run test:unit

  integration_test_dev:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - run: npm i
      - run: COMPONENT_TABLE="origami-build-service-dev-components" HOST="https://origami-build-service-v3-dev.in.ft.com" npm run test:integration

  deploy_dev:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - run: npm i
      - run: sudo ~/project/.circleci/install_terraform.sh
      - run: NODE_ENV=production npm run build &&  npx serverless package --stage dev --package .serverless-package
      - run: npx serverless deploy additionalstacks --conceal --stage dev
      - run: npx serverless deploy --skip-additionalstacks --conceal --stage dev --region eu-west-1 --package .serverless-package
      - run: npx serverless deploy --skip-additionalstacks --conceal --stage dev --region us-west-1 --package .serverless-package
      - run: rm -f terraform.tfstate fastly/terraform/qa_override.tf fastly/terraform/production_override.tf
      - run: FASTLY_API_KEY=$FASTLY_API_KEY_DEV terraform init fastly/terraform/
      - run: FASTLY_API_KEY=$FASTLY_API_KEY_DEV terraform import -config=fastly/terraform fastly_service_v1.app $FASTLY_SERVICE_ID_DEV
      - run: FASTLY_API_KEY=$FASTLY_API_KEY_DEV terraform apply --auto-approve fastly/terraform

  deploy_staging:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - run: npm i
      - run: sudo ~/project/.circleci/install_terraform.sh
      - run: NODE_ENV=production npm run build &&  npx serverless package --stage qa --package .serverless-package
      - run: npx serverless deploy additionalstacks --conceal --stage qa
      - run: npx serverless deploy --skip-additionalstacks --conceal --stage qa --region eu-west-1 --package .serverless-package
      - run: npx serverless deploy --skip-additionalstacks --conceal --stage qa --region us-west-1 --package .serverless-package
      - run: rm -f terraform.tfstate fastly/terraform/dev_override.tf fastly/terraform/production_override.tf
      - run: FASTLY_API_KEY=$FASTLY_API_KEY_QA terraform init fastly/terraform/
      - run: FASTLY_API_KEY=$FASTLY_API_KEY_QA terraform import -config=fastly/terraform fastly_service_v1.app $FASTLY_SERVICE_ID_QA
      - run: FASTLY_API_KEY=$FASTLY_API_KEY_QA terraform apply --auto-approve fastly/terraform

  deploy_production:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - run: npm i
      - run: sudo ~/project/.circleci/install_terraform.sh
      - run: NODE_ENV=production npm run build &&  npx serverless package --stage prod --package .serverless-package
      - run: npx serverless deploy additionalstacks --conceal --stage prod
      - run: npx serverless deploy --skip-additionalstacks --conceal --stage prod --region eu-west-1 --package .serverless-package
      - run: npx serverless deploy --skip-additionalstacks --conceal --stage prod --region us-west-1 --package .serverless-package
      - run: rm -f terraform.tfstate fastly/terraform/dev_override.tf fastly/terraform/production_override.tf
      - run: FASTLY_API_KEY=$FASTLY_API_KEY_PROD terraform init fastly/terraform/
      - run: FASTLY_API_KEY=$FASTLY_API_KEY_PROD terraform import -config=fastly/terraform fastly_service_v1.app $FASTLY_SERVICE_ID_PROD
      - run: FASTLY_API_KEY=$FASTLY_API_KEY_PROD terraform apply --auto-approve fastly/terraform

workflows:
  deploy:
    jobs:
      - lint_terraform
      - lint
      - unit_test
      - deploy_dev:
          requires:
            - lint
            - unit_test
            - lint_terraform
          filters:
            branches:
              ignore:
                - master
      - change-api/release-log:
          requires:
            - deploy_dev
          systemCode: 'origami-build-service-v3'
          environment: 'dev'
          slackChannels: 'origami-deploys'
      - integration_test_dev:
          requires:
            - deploy_dev
      - deploy_staging:
          requires:
            - lint
            - unit_test
            - lint_terraform
          filters:
            branches:
              only:
                - master
      - change-api/release-log:
          requires:
            - deploy_staging
          systemCode: 'origami-build-service-v3'
          environment: 'test'
          slackChannels: 'origami-deploys'