service: ${opt:service, 'origami-build-service'}
#app: your-app-name
#tenant: your-tenant-name

frameworkVersion: "=1.57.0"

provider:
  apiGateway:
    binaryMediaTypes:
      - '*/*'
  environment:
    REGION: ${self:provider.region}
    COMPONENT_TABLE: ${self:service}-${self:provider.stage}-components
    MODULE_BUCKET_NAME: ${self:custom.bucketName}
    NPM_WEBHOOK_SECRET_DEV: ${env:NPM_WEBHOOK_SECRET_DEV}
    ORIGAMI_REPO_DATA_KEY_ID: ${env:ORIGAMI_REPO_DATA_KEY_ID}
    ORIGAMI_REPO_DATA_SECRET_KEY: ${env:ORIGAMI_REPO_DATA_SECRET_KEY}
    SENTRY_DSN: ${env:SENTRY_DSN}
  name: aws
  region: ${opt:region, 'us-east-1'}
  role: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/ApplicationRoleFor_${self:service}
  runtime: nodejs10.x
  stackTags:
    systemCode: ${self:service}
    teamDL: origami.support@ft.com
    environment: ${self:custom.tags.${self:provider.stage}.environment}
  stage: ${opt:stage, self:custom.defaultStage}
  timeout: 30 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  versionFunctions: false # Optional function versioning

package:
  individually: true

custom:
  additionalStacks:
    permanent-dynamo:
      Resources:
        ComponentsDynamoDBTable:
          Type: 'AWS::DynamoDB::Table'
          Properties:
            TableName: ${self:provider.environment.COMPONENT_TABLE}
            AttributeDefinitions:
              -
                AttributeName: name
                AttributeType: S
              -
                AttributeName: version
                AttributeType: S
            KeySchema:
              -
                AttributeName: name
                KeyType: HASH # partition key
              -
                AttributeName: version
                KeyType: RANGE # sort key
            PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: true
            BillingMode: PAY_PER_REQUEST
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
            Tags: 
              - 
                Key: systemCode
                Value: "${self:service}"
              - 
                Key: teamDL
                Value: origami.support@ft.com
              - 
                Key: environment
                Value: "${self:custom.tags.${self:provider.stage}.environment}"
    permanent-s3:
      Resources:
        S3ModuleBucketPolicy:
          Type: 'AWS::S3::BucketPolicy'
          Properties:
            Bucket:
              Ref: "S3ModuleBucket"
            PolicyDocument:
              Id: S3ModuleBucketPolicy
              Statement:
                - Sid: AllowOnlyApplicationToPutObject
                  Effect: Allow
                  Principal:
                    AWS:
                    - ${self:provider.role}
                  Action: s3:PutObject
                  Resource:
                  - arn:aws:s3:::${self:custom.additionalStacks.permanent-s3.Resources.S3ModuleBucket.Properties.BucketName}/*
                - Sid: AllowOnlyApplicationToGetObject
                  Effect: Allow
                  Principal:
                    AWS:
                    - ${self:provider.role}
                  Action: s3:PutObject
                  Resource:
                  - arn:aws:s3:::${self:custom.additionalStacks.permanent-s3.Resources.S3ModuleBucket.Properties.BucketName}/*
        S3ModuleBucket:
          Type: 'AWS::S3::Bucket'
          Properties:
            BucketName: ${self:custom.bucketName}  
  bucketName: ${self:service}-${self:provider.stage}-modules
  bundle:
    sourcemaps: true
    caching: true
    stats: false
    linting: false
  defaultStage: dev
  localstack:
    stages:
      - local
    autostart: true
    debug: true
    host: http://localhost
  remover:
     buckets:
       - ${self:custom.bucketName}
  sentry:
    dsn: ${env:SENTRY_DSN}
    organization: ${env:SENTRY_ORGANISATION}
    project: ${env:SENTRY_PROJECT}
    authToken: ${env:SENTRY_AUTH_TOKEN}
    release:
      version: 'git'
  scriptHooks:
    after:deploy:deploy: >-
      if [ "${self:custom.tags.${self:provider.stage}.environment}" != "d" ]; then aws dynamodb create-global-table
      --global-table-name ${self:provider.environment.COMPONENT_TABLE}
      --replication-group RegionName=eu-west-1 RegionName=us-west-1
      --region eu-west-1; echo done; else echo "Did not create global table as running in development mode"; fi
  tags:
    dev:
      environment: d
    qa:
      environment: t
    prod:
      environment: p

plugins:
  - serverless-bundle
  - serverless-localstack
  - serverless-deployment-bucket # has to be after serverless-localstack
  - serverless-plugin-additional-stacks
  - serverless-sentry
  - serverless-s3-remover
  - serverless-scriptable-plugin

functions:
  create-javascript-bundle:
    handler: functions/create-javascript-bundle.handler
    events:
     - http:
         path: /v3/bundles/js
         method: get
  update-origami-component-list:
    handler: functions/update-origami-component-list.handler
    events:
      - http:
          path: /v3/update-origami-component-list
          method: get
      - schedule: rate(1 day)
