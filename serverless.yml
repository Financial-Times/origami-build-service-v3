service: origami-build-service
#app: your-app-name
#tenant: your-tenant-name

frameworkVersion: "=1.50.0"

provider:
  environment:
    REGION: ${self:provider.region}
    COMPONENT_TABLE: ${self:service}-components
    NPM_WEBHOOK_SECRET_DEV: ${env:NPM_WEBHOOK_SECRET_DEV}
    ORIGAMI_REPO_DATA_KEY_ID: ${env:ORIGAMI_REPO_DATA_KEY_ID}
    ORIGAMI_REPO_DATA_SECRET_KEY: ${env:ORIGAMI_REPO_DATA_SECRET_KEY}
    SENTRY_DSN: ${env:SENTRY_DSN}
  name: aws
  region: ${opt:region, 'eu-west-1'}
  role: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/ApplicationRoleFor_${self:service}
  runtime: nodejs10.x
  stackTags:
    systemCode: ${self:service}
    teamDL: origami.support@ft.com
    environment: ${self:custom.tags.${self:provider.stage}.environment}
  stage: ${opt:stage, self:custom.defaultStage}
  timeout: 30 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  versionFunctions: false # Optional function versioning

custom:
  apigwBinary:
    types:
      - '*/*'
  defaultStage: dev
  globalTables: 
    - 
      regions: 
        - eu-west-1
        - us-west-1
      tableName: "${self:provider.environment.COMPONENT_TABLE}"
      tags: 
        - 
          Key: systemCode
          Value: "${self:service}"
        - 
          Key: teamDL
          Value: origami.support@ft.com
        - 
          Key: environment
          Value: "${self:custom.tags.${self:provider.stage}.environment}"
  output:
    file: ./.${self:provider.stage}-stack.yml
  sentry:
    dsn: ${env:SENTRY_DSN}
    organization: ${env:SENTRY_ORGANISATION}
    project: ${env:SENTRY_PROJECT}
    authToken: ${env:SENTRY_AUTH_TOKEN}
    release:
      version: 'git'
  serverless-offline:
    dontPrintOutput: false
  tags:
    dev:
      environment: t
    qa:
      environment: t
    prod:
      environment: p


plugins:
  - serverless-apigw-binary
  - serverless-offline
  - serverless-sentry
  - serverless-stack-output
  - serverless-create-global-dynamodb-table

functions:
  hello:
    handler: functions/hello.hello
    events:
     - http:
         path: /hello
         method: get
resources:
  Resources:
    ComponentsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.COMPONENT_TABLE}
        AttributeDefinitions:
          -
            AttributeName: name
            AttributeType: S
          -
            AttributeName: version
            AttributeType: S
        KeySchema:
          -
            AttributeName: name
            KeyType: HASH # partition key
          -
            AttributeName: version
            KeyType: RANGE # sort key
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
